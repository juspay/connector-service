name: CI
permissions:
  contents: read

on:
  push:
    branches:
      - main
  pull_request:

  merge_group:
    types:
      - checks_requested

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  typos:
    name: Spell check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Spell check
        uses: crate-ci/typos@master

  check:
    name: Compilation Check
    runs-on: ubuntu-latest

    env:
        RUSTFLAGS: "-D warnings"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: clippy

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - uses: Swatinem/rust-cache@v2.7.8

      - name: Run Clippy
        run: cargo clippy --all-features --all-targets

  formatting:
    name: Check formatting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
          components: rustfmt

      - name: Check formatting
        shell: bash
        run: cargo +nightly fmt --all --check

  docker:
    name: Docker Build and Test
    runs-on: ubuntu-latest
    needs: [check, formatting, typos]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t connector-service:test .

      - name: Test Docker image startup
        run: |
          # Test if the binary can run with --help (if supported)
          timeout 10s docker run --rm connector-service:test --help || echo "Help command not available or failed"
          
          # Test if the container starts successfully (run for 5 seconds then stop)
          timeout 5s docker run --rm --name test-container connector-service:test || echo "Container test completed"
          
          # Alternative: Test if the binary exists and is executable
          docker run --rm --entrypoint /bin/sh connector-service:test -c "ls -la /app/bin/grpc-server && /app/bin/grpc-server --version || echo 'Version command not available'"

      - name: Verify container contents
        run: |
          # Check that the binary exists in the expected location
          docker run --rm --entrypoint /bin/sh connector-service:test -c "test -f /app/bin/grpc-server && echo 'Binary exists'"
          
          # Check that config files are present
          docker run --rm --entrypoint /bin/sh connector-service:test -c "test -d /app/config && ls -la /app/config && echo 'Config directory exists'"
          
          # Check that source code is NOT present
          docker run --rm --entrypoint /bin/sh connector-service:test -c "test ! -d /app/backend && echo 'Source code correctly excluded'"
