name: CI
permissions:
  contents: read

on:
  push:
    branches:
      - main
  pull_request:

  merge_group:
    types:
      - checks_requested

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  typos:
    name: Spell check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Spell check
        uses: crate-ci/typos@master

  check:
    name: Compilation Check
    runs-on: ubuntu-latest

    env:
        RUSTFLAGS: "-D warnings"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: clippy

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - uses: Swatinem/rust-cache@v2.7.8

      - name: Run Clippy
        run: cargo clippy --all-features --all-targets

  formatting:
    name: Check formatting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
          components: rustfmt

      - name: Check formatting
        shell: bash
        run: cargo +nightly fmt --all --check

  release-build-run:
    name: Release Build and Run
    runs-on: ubuntu-latest
    needs: [check, formatting, typos]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable

      - uses: Swatinem/rust-cache@v2.7.8

      - name: Build release binary
        run: |
          cargo build --release

      - name: Test application startup
        run: |
          # Test that the application can show help
          ./target/release/grpc-server --help
          
          # Test that the application can start and run for 3 seconds
          # Run in background and kill after 3 seconds
          ./target/release/grpc-server &
          APP_PID=$!
          sleep 3
          
          # Check if process is still running (success) or crashed (failure)
          if kill -0 $APP_PID 2>/dev/null; then
            echo "Application started successfully and ran for 3 seconds"
            kill $APP_PID
          else
            echo "Application failed to start or crashed"
            wait $APP_PID
            exit 1
          fi
