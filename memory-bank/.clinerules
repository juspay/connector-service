# Connector Service Project Intelligence

## Project Patterns

### Connector Implementation Pattern

When implementing a new connector, follow these patterns:

1. Create a new module in `backend/connector-integration/src/connectors/`
2. Implement the `ConnectorIntegration` trait for each supported payment flow
3. Implement the `IncomingWebhook` trait for webhook handling
4. Add the connector to the connector registry in `backend/connector-integration/src/connectors.rs`

Example:
```rust
// In backend/connector-integration/src/connectors/new_connector.rs
pub struct NewConnector {}

impl ConnectorCommon for NewConnector {
    fn id(&self) -> &'static str {
        "new_connector"
    }
    // Implement other required methods
}

impl ConnectorIntegrationV2<Authorize, PaymentFlowData, PaymentsAuthorizeData, PaymentsResponseData>
    for NewConnector
{
    // Implement methods for authorization flow
}

// In backend/connector-integration/src/connectors.rs
pub mod new_connector;
pub use self::new_connector::NewConnector;
```

### Type Conversion Pattern

Use the `ForeignTryFrom` and `ForeignFrom` traits for type conversions between:
- gRPC API types and domain types
- Domain types and connector-specific types
- Connector responses and domain types

Example:
```rust
impl ForeignTryFrom<PaymentsAuthorizeRequest> for PaymentsAuthorizeData {
    type Error = ApplicationErrorResponse;

    fn foreign_try_from(
        value: PaymentsAuthorizeRequest,
    ) -> Result<Self, error_stack::Report<Self::Error>> {
        // Conversion logic
    }
}
```

### Error Handling Pattern

Use the `error-stack` library for error handling with context:

```rust
fn some_function() -> CustomResult<T, ConnectorError> {
    some_operation().map_err(|err| {
        report!(ConnectorError::OperationFailed)
            .attach_printable(format!("Operation failed: {}", err))
    })?;
    // Rest of the function
}
```

## Code Organization

### Directory Structure

- **backend/connector-integration/**: Connector implementations
- **backend/domain-types/**: Common data structures
- **backend/grpc-api-types/**: gRPC API definitions
- **backend/grpc-server/**: gRPC server implementation
- **sdk/**: Client SDKs
- **examples/**: Example implementations

### File Naming Conventions

- **Connector Files**: `backend/connector-integration/src/connectors/{connector_name}.rs`
- **Transformer Files**: `backend/connector-integration/src/connectors/{connector_name}/transformers.rs`
- **Test Files**: `backend/connector-integration/src/connectors/{connector_name}/test.rs`

## Coding Style

### Rust Conventions

- Use `snake_case` for variables and functions
- Use `CamelCase` for types and traits
- Use `SCREAMING_SNAKE_CASE` for constants
- Use `#[derive]` for common traits when possible
- Prefer `Result` over `Option` for error handling
- Use `?` operator for error propagation

### Documentation

- Document public APIs with doc comments
- Include examples in documentation
- Explain complex logic with inline comments

## Testing Approach

### Test Types

- **Unit Tests**: Test individual components in isolation
- **Integration Tests**: Test interactions between components
- **End-to-End Tests**: Test complete payment flows

### Test Organization

- Place unit tests in the same file as the code being tested
- Place integration tests in a separate `test.rs` file
- Use test fixtures for common test data

## Common Implementation Patterns

### Connector Authentication

Most connectors use one of these authentication methods:
- API Key in headers
- API Key in request body
- API Key + Secret for signature generation

Example:
```rust
fn get_auth_header(
    &self,
    auth_type: &ConnectorAuthType,
) -> CustomResult<Vec<(String, Maskable<String>)>, errors::ConnectorError> {
    let auth = SomeAuthType::try_from(auth_type)
        .map_err(|_| errors::ConnectorError::FailedToObtainAuthType)?;
    Ok(vec![(
        "X-API-KEY".to_string(),
        auth.api_key.into_masked(),
    )])
}
```

### URL Construction

Construct URLs based on the connector's base URL and API version:

```rust
fn get_url(
    &self,
    req: &RouterDataV2<Authorize, PaymentFlowData, PaymentsAuthorizeData, PaymentsResponseData>,
) -> CustomResult<String, errors::ConnectorError> {
    Ok(format!("{}{}/payments", self.connector_base_url(req), API_VERSION))
}
```

### Request Body Construction

Transform domain types to connector-specific request formats:

```rust
fn get_request_body(
    &self,
    req: &RouterDataV2<Authorize, PaymentFlowData, PaymentsAuthorizeData, PaymentsResponseData>,
) -> CustomResult<Option<RequestContent>, errors::ConnectorError> {
    let connector_req = SomeConnectorRequest::try_from(req)?;
    Ok(Some(RequestContent::Json(Box::new(connector_req))))
}
```

### Response Handling

Transform connector responses to domain types:

```rust
fn handle_response(
    &self,
    data: &RouterDataV2<Authorize, PaymentFlowData, PaymentsAuthorizeData, PaymentsResponseData>,
    res: Response,
) -> CustomResult<
    RouterDataV2<Authorize, PaymentFlowData, PaymentsAuthorizeData, PaymentsResponseData>,
    errors::ConnectorError,
> {
    let response: SomeConnectorResponse = res
        .response
        .parse_struct("SomeConnectorResponse")
        .change_context(errors::ConnectorError::ResponseDeserializationFailed)?;

    RouterDataV2::foreign_try_from((response, data.clone(), res.status_code))
        .change_context(errors::ConnectorError::ResponseHandlingFailed)
}
```

## Common Challenges

### Connector-Specific Quirks

- **Adyen**: Uses PSP reference as transaction ID, requires API key authentication
- **Razorpay**: Uses order ID and payment ID, requires key_id and key_secret authentication

### Error Handling Complexity

Different connectors return errors in different formats, requiring careful normalization.

### Type Conversion Complexity

Converting between gRPC, domain, and connector types requires careful handling of optional fields and error cases.

## Best Practices

### Security

- Mask sensitive data (API keys, card numbers) in logs
- Use HTTPS for all external communication
- Validate webhook sources

### Performance

- Use asynchronous I/O for external requests
- Minimize memory allocations in hot paths
- Use connection pooling for HTTP clients

### Maintainability

- Keep connector implementations isolated
- Use common patterns across connectors
- Document connector-specific quirks

## Troubleshooting Tips

### Common Issues

1. **Authentication Failures**
   - Check API key format and permissions
   - Verify authentication header format

2. **Request Format Errors**
   - Check required fields for the specific connector
   - Verify data types and formats

3. **Response Parsing Errors**
   - Check if the connector has changed their response format
   - Verify field names and types

### Debugging Techniques

1. **Enable Debug Logging**
   - Set log level to DEBUG or TRACE
   - Check request and response details

2. **Use Test Mode**
   - Most connectors provide a test/sandbox mode
   - Use test cards and accounts

3. **Compare with API Documentation**
   - Verify request format against connector's API docs
   - Check response format against examples
