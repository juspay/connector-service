syntax = "proto3";

package ucs.payments;

service PaymentService {
  rpc PaymentAuthorize(PaymentsAuthorizeRequest) returns (PaymentsAuthorizeResponse);
  rpc PaymentSync(PaymentsSyncRequest) returns (PaymentsSyncResponse);
  rpc RefundSync(RefundsSyncRequest) returns (RefundsSyncResponse);
  rpc VoidPayment(PaymentsVoidRequest) returns (PaymentsVoidResponse);
  rpc IncomingWebhook(IncomingWebhookRequest) returns (IncomingWebhookResponse);
  rpc Refund(RefundsRequest) returns (RefundsResponse);
  rpc PaymentCapture(PaymentsCaptureRequest) returns (PaymentsCaptureResponse);
  rpc SetupMandate(SetupMandateRequest) returns (SetupMandateResponse);
  rpc AcceptDispute(AcceptDisputeRequest) returns (AcceptDisputeResponse);
  rpc SubmitEvidence (SubmitEvidenceRequest) returns (SubmitEvidenceResponse);
}

message PaymentsAuthorizeRequest {
  int64 amount = 10;
  Currency currency = 15;
  PaymentMethod payment_method = 2;
  PaymentMethodData payment_method_data = 14;
  optional string connector_customer = 1;
  PaymentAddress address = 3;
  AuthenticationType auth_type = 4;
  optional bytes connector_meta_data = 5;
  optional AccessToken access_token = 6;
  optional string session_token = 7;
  optional PaymentMethodToken payment_method_token = 8;
  string connector_request_reference_id = 9;
  optional int64 order_tax_amount = 11;
  optional string email = 12;
  optional string customer_name = 13;
  optional CaptureMethod capture_method = 16;
  optional string return_url = 17;
  optional string webhook_url = 18;
  optional string complete_authorize_url = 19;
  optional FutureUsage setup_future_usage = 20;
  optional bool off_session = 21;
  optional CustomerAcceptance customer_acceptance = 22;
  optional BrowserInformation browser_info = 23;
  optional string order_category = 24;
  bool enrolled_for_3ds = 25;
  optional PaymentExperience payment_experience = 26;
  optional PaymentMethodType payment_method_type = 27;
  bool request_incremental_authorization = 28;
  optional AuthenticationData authentication_data = 29;
  optional bool request_extended_authorization = 30;
  int64 minor_amount = 31;
  optional string merchant_order_reference_id = 32;
  optional int64 shipping_cost = 33;
}

message PaymentsAuthorizeResponse {
  ResponseId resource_id = 1;
  optional RedirectForm redirection_data = 2;
  optional MandateReference mandate_reference = 4;
  optional string network_txn_id = 5;
  optional string connector_response_reference_id = 6;
  optional bool incremental_authorization_allowed = 7;
  AttemptStatus status = 8;
  optional string error_code = 9;
  optional string error_message = 10;
}

message PaymentsSyncRequest {
  string resource_id = 1;
  optional string connector_request_reference_id = 2;
}

message PaymentsSyncResponse {
  ResponseId resource_id = 1;
  AttemptStatus status = 2;
  optional MandateReference mandate_reference = 3;
  optional string network_txn_id = 4;
  optional string connector_response_reference_id = 5;
  optional string error_code = 9;
  optional string error_message = 10;
}

message RefundsSyncRequest {
  string connector_refund_id = 2;
  string connector_transaction_id = 1;
  optional string refund_reason = 3;
}

message RefundsSyncResponse {
  optional string connector_refund_id = 1;
  RefundStatus status = 2;
  optional string connector_response_reference_id = 5;
  optional string error_code = 9;
  optional string error_message = 10;
}

message PaymentsVoidRequest {
  string connector_request_reference_id = 2;
  optional string cancellation_reason = 1;
}

message PaymentsVoidResponse {
  ResponseId resource_id = 1;
  optional string connector_response_reference_id = 3;
  AttemptStatus status = 8;
  optional string error_code = 4;
  optional string error_message = 5;
}

message IncomingWebhookRequest {
  RequestDetails request_details = 2;
  optional ConnectorWebhookSecrets webhook_secrets = 3;
}

message IncomingWebhookResponse {
  EventType event_type = 1;
  WebhookResponseContent content = 2;
  bool source_verified = 3;
}

// TODO: This message is very similar to PaymentsAuthorizeRequest.
// Consider refactoring to a common base message or reusing PaymentsAuthorizeRequest
// if the fields and their intent are largely identical for mandate setup.
// Also, consider clarifying the distinction and usage of PaymentMethod vs PaymentMethodType
// as both are present in this request and PaymentsAuthorizeRequest.
message SetupMandateRequest {
  Currency currency = 15;
  PaymentMethod payment_method = 2;
  PaymentMethodData payment_method_data = 14;
  optional string connector_customer = 1;
  PaymentAddress address = 3;
  AuthenticationType auth_type = 4;
  optional bytes connector_meta_data = 5;
  optional AccessToken access_token = 6;
  optional string session_token = 7;
  optional PaymentMethodToken payment_method_token = 8;
  string connector_request_reference_id = 9;
  optional int64 order_tax_amount = 11;
  optional string email = 12;
  optional string customer_name = 13;
  optional CaptureMethod capture_method = 16;
  optional string return_url = 17;
  optional string webhook_url = 18;
  optional string complete_authorize_url = 19;
  optional FutureUsage setup_future_usage = 20;
  optional bool off_session = 21;
  optional CustomerAcceptance customer_acceptance = 22;
  optional BrowserInformation browser_info = 23;
  optional string order_category = 24;
  bool enrolled_for_3ds = 25;
  optional PaymentExperience payment_experience = 26;
  optional PaymentMethodType payment_method_type = 27;
  bool request_incremental_authorization = 28;
  optional AuthenticationData authentication_data = 29;
  optional bool request_extended_authorization = 30;
  int64 minor_amount = 31;
  optional string merchant_order_reference_id = 32;
  optional int64 shipping_cost = 33;
}

message SetupMandateResponse {
  ResponseId resource_id = 1;
  MandateReference mandate_reference = 4;
  AttemptStatus status = 8;
  optional RedirectForm redirection_data = 2;
  optional string network_txn_id = 5;
  optional string connector_response_reference_id = 6;
  optional bool incremental_authorization_allowed = 7;
  optional string error_code = 9;
  optional string error_message = 10;
}

enum EventType {
  EVENT_TYPE_UNSPECIFIED = 0;
  PAYMENT = 1;
  REFUND = 2;
}

message WebhookResponseContent {
  oneof content {
    PaymentsSyncResponse payments_response = 1;
    RefundsSyncResponse refunds_response = 2;
  }
}

message RequestDetails {
  Method method = 1;
  optional string uri = 2;
  map<string, string> headers = 3;
  bytes body = 4;
  optional string query_params = 5;
}

message ConnectorWebhookSecrets {
  string secret = 1;
  optional string additional_secret = 2;
}

message RefundsRequest {
  string refund_id = 1;
  string connector_transaction_id = 2;
  optional string connector_refund_id = 3;
  Currency currency = 15;
  int64 payment_amount = 4;
  optional string reason = 5;
  optional string webhook_url = 6;
  int64 refund_amount = 7;
  optional bytes connector_metadata = 8;
  optional bytes refund_connector_metadata = 9;
  optional BrowserInformation browser_info = 23;
  int64 minor_payment_amount = 10;
  int64 minor_refund_amount = 11;
  optional string merchant_account_id = 12;
  optional CaptureMethod capture_method = 16;
}

message RefundsResponse {
  optional string connector_refund_id = 1;
  RefundStatus refund_status = 36;
  optional string error_code = 2;
  optional string error_message = 3;
}

enum Connector {
  CONNECTOR_UNSPECIFIED = 0;
  ADYEN_PLATFORM = 1;
  ACI = 2;
  ADYEN = 3;
  AIRWALLEX = 4;
  AUTHORIZE_DOT_NET = 5;
  BAMBORA = 6;
  BAMBORA_APAC = 7;
  BANK_OF_AMERICA = 8;
  BILLWERK = 9;
  BITPAY = 10;
  BLUE_SNAP = 11;
  BOKU = 12;
  BRAINTREE = 13;
  CASH_TO_CODE = 14;
  CHARGEBEE = 15;
  CHECKOUT = 16;
  COINBASE = 17;
  COINGATE = 18;
  CRYPTOPAY = 19;
  CTP_MASTERCARD = 20;
  CTP_VISA = 21;
  CYBERSOURCE = 22;
  DATATRANS = 23;
  DEUTSCHE_BANK = 24;
  DIGITALVIRGO = 25;
  DLOCAL = 26;
  EBANX = 27;
  ELAVON = 28;
  FISERV = 29;
  FISERV_EMEA = 30;
  FIUU = 31;
  FORTE = 32;
  GETNET = 33;
  GLOBALPAY = 34;
  GLOBEPAY = 35;
  GOCARDLESS = 36;
  GPAYMENTS = 37;
  HIPAY = 38;
  HELCIM = 39;
  INESPAY = 40;
  IATA_PAY = 41;
  ITAU_BANK = 42;
  JPMORGAN = 43;
  JUSPAY_THREEDS_SERVER = 44;
  KLARNA = 45;
  MIFINITY = 46;
  MOLLIE = 47;
  MONERIS = 48;
  MULTI_SAFE_PAY = 49;
  NETCETERA = 50;
  NEXI_NETS = 51;
  NEXI_XPAY = 52;
  NMI = 53;
  NOMUPAY = 54;
  NOON = 55;
  NOVALNET = 56;
  NUVEI = 57;
  OPENNODE = 58;
  PAYBOX = 59;
  PAYME = 60;
  PAYONE = 61;
  PAYPAL = 62;
  PAYSTACK = 63;
  PAYU = 64;
  PLACE_TO_PAY = 65;
  POWERTRANZ = 66;
  PROPHETPAY = 67;
  RAPYD = 68;
  RAZORPAY = 69;
  RECURLY = 70;
  REDSYS = 71;
  SHIFT4 = 72;
  SQUARE = 73;
  STAX = 74;
  STRIPE = 75;
  TAXJAR = 76;
  THREEDSECUREIO = 77;
  TRUSTPAY = 78;
  TSYS = 79;
  VOLT = 80;
  WELLS_FARGO = 81;
  WISE = 82;
  WORLDLINE = 83;
  WORLDPAY = 84;
  SIGNIFYD = 85;
  PLAID = 86;
  RISKIFIED = 87;
  XENDIT = 88;
  ZEN = 89;
  ZSL = 90;
}

message ResponseId {
  oneof id {
    string connector_transaction_id = 1;
    string encoded_data = 2;
    bool no_response_id = 3; // Using bool as a presence indicator for NoResponseId
  }
}

message RedirectForm {
  oneof form_type {
    FormData form = 1;
    HtmlData html = 2;
  }
}

message FormData {
  string endpoint = 1;
  Method method = 2;
  map<string, string> form_fields = 3;
}

message HtmlData {
  string html_data = 1;
}

enum Method {
  METHOD_UNSPECIFIED = 0;
  GET = 1;
  POST = 2;
  // Add other HTTP methods as needed
}

message MandateReference {
  optional string connector_mandate_id = 1;
}

enum Currency {
  CURRENCY_UNSPECIFIED = 0;
  AED = 1;
  AFN = 2;
  ALL = 3;
  AMD = 4;
  ANG = 5;
  AOA = 6;
  ARS = 7;
  AUD = 8;
  AWG = 9;
  AZN = 10;
  BAM = 11;
  BBD = 12;
  BDT = 13;
  BGN = 14;
  BHD = 15;
  BIF = 16;
  BMD = 17;
  BND = 18;
  BOB = 19;
  BRL = 20;
  BSD = 21;
  BTN = 22;
  BWP = 23;
  BYN = 24;
  BZD = 25;
  CAD = 26;
  CDF = 27;
  CHF = 28;
  CLF = 29;
  CLP = 30;
  CNY = 31;
  COP = 32;
  CRC = 33;
  CUC = 34;
  CUP = 35;
  CVE = 36;
  CZK = 37;
  DJF = 38;
  DKK = 39;
  DOP = 40;
  DZD = 41;
  EGP = 42;
  ERN = 43;
  ETB = 44;
  EUR = 45;
  FJD = 46;
  FKP = 47;
  GBP = 48;
  GEL = 49;
  GHS = 50;
  GIP = 51;
  GMD = 52;
  GNF = 53;
  GTQ = 54;
  GYD = 55;
  HKD = 56;
  HNL = 57;
  HRK = 58;
  HTG = 59;
  HUF = 60;
  IDR = 61;
  ILS = 62;
  INR = 63;
  IQD = 64;
  IRR = 65;
  ISK = 66;
  JMD = 67;
  JOD = 68;
  JPY = 69;
  KES = 70;
  KGS = 71;
  KHR = 72;
  KMF = 73;
  KPW = 74;
  KRW = 75;
  KWD = 76;
  KYD = 77;
  KZT = 78;
  LAK = 79;
  LBP = 80;
  LKR = 81;
  LRD = 82;
  LSL = 83;
  LYD = 84;
  MAD = 85;
  MDL = 86;
  MGA = 87;
  MKD = 88;
  MMK = 89;
  MNT = 90;
  MOP = 91;
  MRU = 92;
  MUR = 93;
  MVR = 94;
  MWK = 95;
  MXN = 96;
  MYR = 97;
  MZN = 98;
  NAD = 99;
  NGN = 100;
  NIO = 101;
  NOK = 102;
  NPR = 103;
  NZD = 104;
  OMR = 105;
  PAB = 106;
  PEN = 107;
  PGK = 108;
  PHP = 109;
  PKR = 110;
  PLN = 111;
  PYG = 112;
  QAR = 113;
  RON = 114;
  RSD = 115;
  RUB = 116;
  RWF = 117;
  SAR = 118;
  SBD = 119;
  SCR = 120;
  SDG = 121;
  SEK = 122;
  SGD = 123;
  SHP = 124;
  SLE = 125;
  SLL = 126;
  SOS = 127;
  SRD = 128;
  SSP = 129;
  STD = 130;
  STN = 131;
  SVC = 132;
  SYP = 133;
  SZL = 134;
  THB = 135;
  TJS = 136;
  TMT = 137;
  TND = 138;
  TOP = 139;
  TRY = 140;
  TTD = 141;
  TWD = 142;
  TZS = 143;
  UAH = 144;
  UGX = 145;
  USD = 146;
  UYU = 147;
  UZS = 148;
  VES = 149;
  VND = 150;
  VUV = 151;
  WST = 152;
  XAF = 153;
  XCD = 154;
  XOF = 155;
  XPF = 156;
  YER = 157;
  ZAR = 158;
  ZMW = 159;
  ZWL = 160;
}

enum CaptureMethod {
  CAPTURE_METHOD_UNSPECIFIED = 0;
  AUTOMATIC = 1;
  MANUAL = 2;
  MANUAL_MULTIPLE = 3;
  SCHEDULED = 4;
  SEQUENTIAL_AUTOMATIC = 5;
}

enum FutureUsage {
  FUTURE_USAGE_UNSPECIFIED = 0;
  OFF_SESSION = 1;
  ON_SESSION = 2;
}

message CustomerAcceptance {
  AcceptanceType acceptance_type = 1;
  string accepted_at = 2; // ISO8601 formatted string
  optional OnlineMandate online = 3;
}

enum AcceptanceType {
  ACCEPTANCE_TYPE_UNSPECIFIED = 0;
  ONLINE = 1;
  OFFLINE = 2;
}

message BrowserInformation {
  optional uint32 color_depth = 1;
  optional bool java_enabled = 2;
  optional bool java_script_enabled = 3;
  optional string language = 4;
  optional uint32 screen_height = 5;
  optional uint32 screen_width = 6;
  optional int32 time_zone = 7;
  optional string ip_address = 8; // Using string for IP address
  optional string accept_header = 9;
  optional string user_agent = 10;
  optional string os_type = 11;
  optional string os_version = 12;
  optional string device_model = 13;
  optional string accept_language = 14;
}

enum PaymentExperience {
  PAYMENT_EXPERIENCE_UNSPECIFIED = 0;
  REDIRECT_TO_URL = 1;
  INVOKE_SDK_CLIENT = 2;
  DISPLAY_QR_CODE = 3;
  ONE_CLICK = 4;
  LINK_WALLET = 5;
  INVOKE_PAYMENT_APP = 6;
  DISPLAY_WAIT_SCREEN = 7;
  COLLECT_OTP = 8;
}

enum PaymentMethodType {
  PAYMENT_METHOD_TYPE_UNSPECIFIED = 0;
  ACH = 1;
  AFFIRM = 2;
  AFTERPAY_CLEARPAY = 3;
  ALFAMART = 4;
  ALI_PAY = 5;
  ALI_PAY_HK = 6;
  ALMA = 7;
  AMAZON_PAY = 8;
  APPLE_PAY = 9;
  ATOME = 10;
  BACS = 11;
  BANCONTACT_CARD = 12;
  BECS = 13;
  BENEFIT = 14;
  BIZUM = 15;
  BLIK = 16;
  BOLETO = 17;
  BCA_BANK_TRANSFER = 18;
  BNI_VA = 19;
  BRI_VA = 20;
  CARD_REDIRECT = 21;
  CIMB_VA = 22;
  CLASSIC_REWARD = 23;
  CREDIT = 24;
  CRYPTO_CURRENCY = 25;
  CASHAPP = 26;
  DANA = 27;
  DANAMON_VA = 28;
  DEBIT = 29;
  DUIT_NOW = 30;
  EFECTY = 31;
  EFT = 32;
  EPS = 33;
  FPS = 34;
  EVOUCHER = 35;
  GIROPAY = 36;
  GIVEX = 37;
  GOOGLE_PAY = 38;
  GO_PAY = 39;
  GCASH = 40;
  IDEAL = 41;
  INTERAC = 42;
  INDOMARET = 43;
  KAKAO_PAY = 44;
  LOCAL_BANK_REDIRECT = 45;
  MANDIRI_VA = 46;
  KNET = 47;
  MB_WAY = 48;
  MOBILE_PAY = 49;
  MOMO = 50;
  MOMO_ATM = 51;
  MULTIBANCO = 52;
  ONLINE_BANKING_THAILAND = 53;
  ONLINE_BANKING_CZECH_REPUBLIC = 54;
  ONLINE_BANKING_FINLAND = 55;
  ONLINE_BANKING_FPX = 56;
  ONLINE_BANKING_POLAND = 57;
  ONLINE_BANKING_SLOVAKIA = 58;
  OXXO = 59;
  PAGO_EFECTIVO = 60;
  PERMATA_BANK_TRANSFER = 61;
  OPEN_BANKING_UK = 62;
  PAY_BRIGHT = 63;
  // PAZE = 65; // Original value was 65, next should be 64
  PAZE = 64;
  PIX = 65;
  PAY_SAFE_CARD = 66;
  PRZELEWY24 = 67;
  PROMPT_PAY = 68;
  PSE = 69;
  RED_COMPRA = 70;
  RED_PAGOS = 71;
  SAMSUNG_PAY = 72;
  SEPA = 73;
  SEPA_BANK_TRANSFER = 74;
  SOFORT = 75;
  SWISH = 76;
  TOUCH_N_GO = 77;
  TRUSTLY = 78;
  TWINT = 79;
  UPI_COLLECT = 80;
  UPI_INTENT = 81;
  VIPPS = 82;
  VIET_QR = 83;
  VENMO = 84;
  WALLEY = 85;
  WE_CHAT_PAY = 86;
  SEVEN_ELEVEN = 87;
  LAWSON = 88;
  MINI_STOP = 89;
  FAMILY_MART = 90;
  SEICOMART = 91;
  PAY_EASY = 92;
  LOCAL_BANK_TRANSFER = 93;
  // OPEN_BANKING_PIS = 96; // Original value was 96, next should be 94
  OPEN_BANKING_PIS = 94;
  DIRECT_CARRIER_BILLING = 95;
  INSTANT_BANK_TRANSFER = 96;
}

message PaymentMethodData {
  oneof data {
    Card card = 1;
  }
}

message Card {
  string card_number = 1;
  string card_exp_month = 2;
  string card_exp_year = 3;
  optional string card_holder_name = 4;
  string card_cvc = 5;
  optional string card_issuer = 6;
  optional CardNetwork card_network = 7;
  optional string card_type = 8;
  optional string card_issuing_country = 9;
  optional string bank_code = 10;
  optional string nick_name = 11;
}

enum CardNetwork {
  CARD_NETWORK_UNSPECIFIED = 0;
  VISA = 1;
  MASTERCARD = 2;
  AMERICAN_EXPRESS = 3;
  JCB = 4;
  DINERS_CLUB = 5;
  DISCOVER = 6;
  CARTES_BANCAIRES = 7;
  UNION_PAY = 8;
  RU_PAY = 9;
  MAESTRO = 10;
}

message OnlineMandate {
  optional string ip_address = 1;
  string user_agent = 2;
}

enum AuthenticationType {
  AUTHENTICATION_TYPE_UNSPECIFIED = 0;
  THREE_DS = 1;
  NO_THREE_DS = 2;
}

message PhoneDetails {
  optional string number = 1;
  optional string country_code = 2;
}

message AuthenticationData {
  optional string eci = 1;
  string cavv = 2;
  optional string threeds_server_transaction_id = 3;
  optional string message_version = 4; // Using string for SemanticVersion
  optional string ds_trans_id = 5;
}

enum PaymentMethod {
  PAYMENT_METHOD_UNSPECIFIED = 0;
  CARD = 1;
}

message PaymentAddress {
  optional Address shipping = 1;
  optional Address billing = 2;
  optional Address unified_payment_method_billing = 3;
  optional Address payment_method_billing = 4;
}

// Country Alpha-2 code enumeration
enum CountryAlpha2 {
  COUNTRY_ALPHA2_UNSPECIFIED = 0;
  US = 1;
  AF = 2;
  AX = 3;
  AL = 4;
  DZ = 5;
  AS = 6;
  AD = 7;
  AO = 8;
  AI = 9;
  AQ = 10;
  AG = 11;
  AR = 12;
  AM = 13;
  AW = 14;
  AU = 15;
  AT = 16;
  AZ = 17;
  BS = 18;
  BH = 19;
  BD = 20;
  BB = 21;
  BY = 22;
  BE = 23;
  BZ = 24;
  BJ = 25;
  BM = 26;
  BT = 27;
  BO = 28;
  BQ = 29;
  BA = 30;
  BW = 31;
  BV = 32;
  BR = 33;
  IO = 34;
  BN = 35;
  BG = 36;
  BF = 37;
  BI = 38;
  KH = 39;
  CM = 40;
  CA = 41;
  CV = 42;
  KY = 43;
  CF = 44;
  TD = 45;
  CL = 46;
  CN = 47;
  CX = 48;
  CC = 49;
  CO = 50;
  KM = 51;
  CG = 52;
  CD = 53;
  CK = 54;
  CR = 55;
  CI = 56;
  HR = 57;
  CU = 58;
  CW = 59;
  CY = 60;
  CZ = 61;
  DK = 62;
  DJ = 63;
  DM = 64;
  DO = 65;
  EC = 66;
  EG = 67;
  SV = 68;
  GQ = 69;
  ER = 70;
  EE = 71;
  ET = 72;
  FK = 73;
  FO = 74;
  FJ = 75;
  FI = 76;
  FR = 77;
  GF = 78;
  PF = 79;
  TF = 80;
  GA = 81;
  GM = 82;
  GE = 83;
  DE = 84;
  GH = 85;
  GI = 86;
  GR = 87;
  GL = 88;
  GD = 89;
  GP = 90;
  GU = 91;
  GT = 92;
  GG = 93;
  GN = 94;
  GW = 95;
  GY = 96;
  HT = 97;
  HM = 98;
  VA = 99;
  HN = 100;
  HK = 101;
  HU = 102;
  IS = 103;
  IN = 104;
  ID = 105;
  IR = 106;
  IQ = 107;
  IE = 108;
  IM = 109;
  IL = 110;
  IT = 111;
  JM = 112;
  JP = 113;
  JE = 114;
  JO = 115;
  KZ = 116;
  KE = 117;
  KI = 118;
  KP = 119;
  KR = 120;
  KW = 121;
  KG = 122;
  LA = 123;
  LV = 124;
  LB = 125;
  LS = 126;
  LR = 127;
  LY = 128;
  LI = 129;
  LT = 130;
  LU = 131;
  MO = 132;
  MK = 133;
  MG = 134;
  MW = 135;
  MY = 136;
  MV = 137;
  ML = 138;
  MT = 139;
  MH = 140;
  MQ = 141;
  MR = 142;
  MU = 143;
  YT = 144;
  MX = 145;
  FM = 146;
  MD = 147;
  MC = 148;
  MN = 149;
  ME = 150;
  MS = 151;
  MA = 152;
  MZ = 153;
  MM = 154;
  NA = 155;
  NR = 156;
  NP = 157;
  NL = 158;
  NC = 159;
  NZ = 160;
  NI = 161;
  NE = 162;
  NG = 163;
  NU = 164;
  NF = 165;
  MP = 166;
  NO = 167;
  OM = 168;
  PK = 169;
  PW = 170;
  PS = 171;
  PA = 172;
  PG = 173;
  PY = 174;
  PE = 175;
  PH = 176;
  PN = 177;
  PL = 178;
  PT = 179;
  PR = 180;
  QA = 181;
  RE = 182;
  RO = 183;
  RU = 184;
  RW = 185;
  BL = 186;
  SH = 187;
  KN = 188;
  LC = 189;
  MF = 190;
  PM = 191;
  VC = 192;
  WS = 193;
  SM = 194;
  ST = 195;
  SA = 196;
  SN = 197;
  RS = 198;
  SC = 199;
  SL = 200;
  SG = 201;
  SX = 202;
  SK = 203;
  SI = 204;
  SB = 205;
  SO = 206;
  ZA = 207;
  GS = 208;
  SS = 209;
  ES = 210;
  LK = 211;
  SD = 212;
  SR = 213;
  SJ = 214;
  SZ = 215;
  SE = 216;
  CH = 217;
  SY = 218;
  TW = 219;
  TJ = 220;
  TZ = 221;
  TH = 222;
  TL = 223;
  TG = 224;
  TK = 225;
  TO = 226;
  TT = 227;
  TN = 228;
  TR = 229;
  TM = 230;
  TC = 231;
  TV = 232;
  UG = 233;
  UA = 234;
  AE = 235;
  GB = 236;
  UM = 237;
  UY = 238;
  UZ = 239;
  VU = 240;
  VE = 241;
  VN = 242;
  VG = 243;
  VI = 244;
  WF = 245;
  EH = 246;
  YE = 247;
  ZM = 248;
  ZW = 249;
}

message Address {
  optional AddressDetails address = 1;
  optional PhoneDetails phone = 2;
  optional string email = 3; // Using string for Email
}

message AddressDetails {
  optional string city = 1;
  optional CountryAlpha2 country = 2;
  optional string line1 = 3;
  optional string line2 = 4;
  optional string line3 = 5;
  optional string zip = 6;
  optional string state = 7;
  optional string first_name = 8;
  optional string last_name = 9;
}

message AccessToken {
  string token = 1;
  int64 expires = 2;
}

message PaymentMethodToken {
  string token = 1;
}

enum AttemptStatus {
  ATTEMPT_STATUS_UNSPECIFIED = 0;
  STARTED = 1;
  AUTHENTICATION_FAILED = 2;
  ROUTER_DECLINED = 3;
  AUTHENTICATION_PENDING = 4;
  AUTHENTICATION_SUCCESSFUL = 5;
  AUTHORIZED = 6;
  AUTHORIZATION_FAILED = 7;
  CHARGED = 8;
  AUTHORIZING = 9;
  COD_INITIATED = 10;
  VOIDED = 11;
  VOID_INITIATED = 12;
  CAPTURE_INITIATED = 13;
  CAPTURE_FAILED = 14;
  VOID_FAILED = 15;
  AUTO_REFUNDED = 16;
  PARTIAL_CHARGED = 17;
  PARTIAL_CHARGED_AND_CHARGEABLE = 18;
  UNRESOLVED = 19;
  PENDING = 20;
  FAILURE = 21;
  PAYMENT_METHOD_AWAITED = 22;
  CONFIRMATION_AWAITED = 23;
  DEVICE_DATA_COLLECTION_PENDING = 24;
}

enum RefundStatus {
  REFUND_STATUS_UNSPECIFIED = 0;
  REFUND_FAILURE = 1;
  REFUND_MANUAL_REVIEW = 2;
  REFUND_PENDING = 3;
  REFUND_SUCCESS = 4;
  REFUND_TRANSACTION_FAILURE = 5;
}

message MultipleCaptureRequestData {
    int64 capture_sequence = 2;
    string capture_reference = 4;
}

message PaymentsCaptureRequest {
  string connector_transaction_id = 1;
  int64 amount_to_capture = 2;
  Currency currency = 15;
  optional MultipleCaptureRequestData multiple_capture_data = 21;
  optional bytes connector_meta_data = 3;
}


message PaymentsCaptureResponse {
  ResponseId resource_id = 1;
  optional string connector_response_reference_id = 2;
  AttemptStatus status = 8;
  optional string error_code = 3;
  optional string error_message = 4;
}

message AcceptDisputeRequest {
  optional string dispute_id = 1;
  string connector_dispute_id = 3;
}

message AcceptDisputeResponse {
  optional string connector_dispute_id = 1;
  DisputeStatus dispute_status = 2;
  optional string connector_dispute_status = 3;
  optional string error_code = 4;
  optional string error_message = 5;
}

enum DisputeStatus {
  DISPUTE_STATUS_UNSPECIFIED = 0;
  DISPUTE_OPENED = 1;
  DISPUTE_EXPIRED = 2;
  DISPUTE_ACCEPTED = 3;
  DISPUTE_CANCELLED = 4;
  DISPUTE_CHALLENGED = 5;
  DISPUTE_WON = 6;
  DISPUTE_LOST = 7;
}

message SubmitEvidenceRequest {
  optional string dispute_id = 1;
  string connector_dispute_id = 2;
  optional string access_activity_log = 3;
  optional string billing_address = 4;
  optional bytes cancellation_policy = 5;
  optional string cancellation_policy_file_type = 6;
  optional string cancellation_policy_provider_file_id = 7;
  optional string cancellation_policy_disclosure = 8;
  optional string cancellation_rebuttal = 9;
  optional bytes customer_communication = 10;
  optional string customer_communication_file_type = 11;
  optional string customer_communication_provider_file_id = 12;
  optional string customer_email_address = 13;
  optional string customer_name = 14;
  optional string customer_purchase_ip = 15;
  optional bytes customer_signature = 16;
  optional string customer_signature_file_type = 17;
  optional string customer_signature_provider_file_id = 18;
  optional string product_description = 19;
  optional bytes receipt = 20;
  optional string receipt_file_type = 21;
  optional string receipt_provider_file_id = 22;
  optional bytes refund_policy = 23;
  optional string refund_policy_file_type = 24;
  optional string refund_policy_provider_file_id = 25;
  optional string refund_policy_disclosure = 26;
  optional string refund_refusal_explanation = 27;
  optional string service_date = 28;
  optional bytes service_documentation = 29;
  optional string service_documentation_file_type = 30;
  optional string service_documentation_provider_file_id = 31;
  optional string shipping_address = 32;
  optional string shipping_carrier = 33;
  optional string shipping_date = 50;
  optional bytes shipping_documentation = 51;
  optional string shipping_documentation_file_type = 52;
  optional string shipping_documentation_provider_file_id = 53; // Renumbered from 37 for sequence
  optional string shipping_tracking_number = 38;
  optional bytes invoice_showing_distinct_transactions = 39;
  optional string invoice_showing_distinct_transactions_file_type = 40;
  optional string invoice_showing_distinct_transactions_provider_file_id = 41;
  optional bytes recurring_transaction_agreement = 42;
  optional string recurring_transaction_agreement_file_type = 43;
  optional string recurring_transaction_agreement_provider_file_id = 44;
  optional  bytes uncategorized_file = 45;
  optional  string uncategorized_file_type = 46;
  optional  string uncategorized_file_provider_file_id = 47;
  optional  string uncategorized_text = 48;
}

message SubmitEvidenceResponse {
  optional string connector_dispute_id = 1;
  DisputeStatus dispute_status = 2;
  optional string connector_dispute_status = 3;
  optional string error_code = 4;
  optional string error_message = 5;
}
