#!/usr/bin/env bash

# Connector Service - Add New Connector Script
# This script generates fresh boilerplate code for new connectors in connector-service architecture

set -e  # Exit on any error

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
ORANGE='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Script configuration
SCRIPT_DIR="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
BACKUP_DIR="${SCRIPT_DIR}/.connector_backups"

# Paths relative to connector-service root
DOMAIN_TYPES_DIR="backend/domain_types/src"
CONNECTOR_INTEGRATION_DIR="backend/connector-integration/src"
CONFIG_DIR="config"

# Function to print colored output
print_message() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

print_error() {
    print_message "$RED" "ERROR: $1"
}

print_success() {
    print_message "$GREEN" "SUCCESS: $1"
}

print_info() {
    print_message "$BLUE" "INFO: $1"
}

print_warning() {
    print_message "$ORANGE" "WARNING: $1"
}

# Function to validate inputs
validate_inputs() {
    local connector_name=$1
    local base_url=$2
    
    if [ -z "$connector_name" ] || [ -z "$base_url" ]; then
        print_error "Connector name and base URL are required"
        echo "Usage: $0 <connector_name> <base_url>"
        echo "Example: $0 stripe https://api.stripe.com"
        exit 1
    fi
    
    # Validate connector name format (snake_case)
    if [[ ! "$connector_name" =~ ^[a-z][a-z0-9_]*$ ]]; then
        print_error "Connector name must be in snake_case format (lowercase, numbers, underscores only)"
        echo "Example: stripe, paypal_pro, auth_net"
        exit 1
    fi
    
    # Validate URL format
    if [[ ! "$base_url" =~ ^https?:// ]]; then
        print_error "Base URL must start with http:// or https://"
        exit 1
    fi
    
    # Check if connector already exists
    if [ -f "${CONNECTOR_INTEGRATION_DIR}/connectors/${connector_name}.rs" ]; then
        print_error "Connector '$connector_name' already exists"
        exit 1
    fi
}

# Function to find previous connector for alphabetical placement
find_prev_connector() {
    local new_connector=$1
    local result_var=$2
    
    # Get existing connectors from ConnectorEnum
    local connectors_file="${DOMAIN_TYPES_DIR}/connector_types.rs"
    
    if [ ! -f "$connectors_file" ]; then
        print_error "connector_types.rs not found at $connectors_file"
        exit 1
    fi
    
    # Extract existing connectors from enum
    local existing_connectors=$(grep -A 100 "pub enum ConnectorEnum" "$connectors_file" | \
        grep -E "^\s+[A-Z][a-zA-Z0-9]*," | \
        sed 's/^\s*//' | \
        sed 's/,$//' | \
        tr '[:upper:]' '[:lower:]' | \
        sort)
    
    # Add new connector and sort
    local all_connectors=(${existing_connectors[@]} "$new_connector")
    IFS=$'\n' sorted_connectors=($(printf '%s\n' "${all_connectors[@]}" | sort))
    
    # Find previous connector
    for i in "${!sorted_connectors[@]}"; do
        if [ "${sorted_connectors[$i]}" = "$new_connector" ] && [ $i != "0" ]; then
            eval "$result_var='${sorted_connectors[i-1]}'"
            return 0
        fi
    done
    
    # If first in list, use the first existing connector
    if [ ${#sorted_connectors[@]} -gt 1 ]; then
        eval "$result_var='${sorted_connectors[0]}'"
    else
        eval "$result_var='adyen'"  # fallback
    fi
}

# Function to convert snake_case to CamelCase
to_camel_case() {
    local snake_case=$1
    echo "$snake_case" | sed -r 's/(^|_)([a-z])/\U\2/g'
}

# Function to create backup of files before modification
create_backup() {
    local file_path=$1
    
    if [ -f "$file_path" ]; then
        mkdir -p "$BACKUP_DIR"
        local backup_name=$(basename "$file_path").$(date +%Y%m%d_%H%M%S).bak
        cp "$file_path" "${BACKUP_DIR}/${backup_name}"
        print_info "Backed up $file_path to ${BACKUP_DIR}/${backup_name}"
    fi
}

# Function to restore backups in case of failure
restore_backups() {
    if [ -d "$BACKUP_DIR" ]; then
        print_warning "Restoring backups due to failure..."
        # Implementation would restore latest backups
        # For now, user can manually restore from .connector_backups/
    fi
}

# Function to update ConnectorEnum in connector_types.rs
update_connector_enum() {
    local connector_name=$1
    local connector_camel=$2
    local prev_connector_camel=$3
    local file_path="${DOMAIN_TYPES_DIR}/connector_types.rs"
    
    print_info "Updating ConnectorEnum in $file_path"
    
    # Add enum variant
    sed -i.tmp "s/    ${prev_connector_camel},/    ${prev_connector_camel},\n    ${connector_camel},/" "$file_path"
    
    # Add gRPC mapping in ForeignTryFrom impl
    sed -i.tmp "/grpc_api_types::payments::Connector::${prev_connector_camel} => Ok(Self::${prev_connector_camel}),/a\\
            grpc_api_types::payments::Connector::${connector_camel} => Ok(Self::${connector_camel})," "$file_path"
    
    # Clean up temp file
    rm -f "${file_path}.tmp"
    
    print_success "Updated ConnectorEnum with $connector_camel"
}

# Function to update Connectors struct in types.rs
update_connectors_struct() {
    local connector_name=$1
    local prev_connector=$2
    local file_path="${DOMAIN_TYPES_DIR}/types.rs"
    
    print_info "Updating Connectors struct in $file_path"
    
    # Add connector field to struct
    sed -i.tmp "s/    pub ${prev_connector}: ConnectorParams,/    pub ${prev_connector}: ConnectorParams,\n    pub ${connector_name}: ConnectorParams,/" "$file_path"
    
    # Clean up temp file
    rm -f "${file_path}.tmp"
    
    print_success "Updated Connectors struct with $connector_name"
}

# Function to update connector integration files
update_connector_integration() {
    local connector_name=$1
    local connector_camel=$2
    local prev_connector_camel=$3
    
    # Update types.rs - add use statement
    local types_file="${CONNECTOR_INTEGRATION_DIR}/types.rs"
    print_info "Updating use statement in $types_file"
    
    sed -i.tmp "s/use crate::connectors::{\\([^}]*\\)\\(${prev_connector_camel}\\)\\([^}]*\\)};/use crate::connectors::{\\1\\2, ${connector_camel}\\3};/" "$types_file"
    
    # Update convert_connector function
    sed -i.tmp "/ConnectorEnum::${prev_connector_camel} => Box::new(${prev_connector_camel}::new()),/a\\
            ConnectorEnum::${connector_camel} => Box::new(${connector_camel}::new())," "$types_file"
    
    rm -f "${types_file}.tmp"
    
    # Update connectors.rs - add module export
    local connectors_file="${CONNECTOR_INTEGRATION_DIR}/connectors.rs"
    print_info "Updating module exports in $connectors_file"
    
    sed -i.tmp "s/pub mod ${prev_connector};/pub mod ${prev_connector};\npub mod ${connector_name};/" "$connectors_file"
    sed -i.tmp "s/pub use self::${prev_connector}::${prev_connector_camel};/pub use self::${prev_connector}::${prev_connector_camel};\npub use self::${connector_name}::${connector_camel};/" "$connectors_file"
    
    rm -f "${connectors_file}.tmp"
    
    print_success "Updated connector integration files"
}

# Function to update development.toml
update_config() {
    local connector_name=$1
    local base_url=$2
    local prev_connector=$3
    local config_file="${CONFIG_DIR}/development.toml"
    
    print_info "Updating configuration in $config_file"
    
    # Add connector configuration
    sed -i.tmp "s|${prev_connector}.base_url = .*|&\n${connector_name}.base_url = \"${base_url}\"|" "$config_file"
    
    rm -f "${config_file}.tmp"
    
    print_success "Updated configuration with base URL"
}

# Function to generate main connector file
generate_connector_file() {
    local connector_name=$1
    local connector_camel=$2
    local connector_dir="${CONNECTOR_INTEGRATION_DIR}/connectors"
    local connector_file="${connector_dir}/${connector_name}.rs"
    
    print_info "Generating main connector file: $connector_file"
    
    # Create connector directory if it doesn't exist
    mkdir -p "$connector_dir"
    
    cat > "$connector_file" << EOF
pub mod transformers;

use base64::Engine;
use common_enums::CurrencyUnit;
use common_utils::{ 
    errors::CustomResult, ext_traits::ByteSliceExt, types::StringMinorUnit,
    consts::{NO_ERROR_CODE, NO_ERROR_MESSAGE},
    };
use domain_types::{
    connector_flow::{
        Accept, Authorize, Capture, CreateOrder, DefendDispute, PSync, RSync, Refund,
        RepeatPayment, SetupMandate, SubmitEvidence, Void, CreateSessionToken,
    },
    connector_types::{
        AcceptDisputeData, DisputeDefendData, DisputeFlowData, DisputeResponseData,
        PaymentCreateOrderData, PaymentCreateOrderResponse, PaymentFlowData, PaymentVoidData,
        PaymentsAuthorizeData, PaymentsCaptureData, PaymentsResponseData, PaymentsSyncData,
        RefundFlowData, RefundSyncData, RefundsData, RefundsResponseData, RepeatPaymentData,
        SetupMandateRequestData, SubmitEvidenceData, SessionTokenRequestData, SessionTokenResponseData,
    },
    errors,
    payment_method_data::PaymentMethodDataTypes,
    router_data::{ConnectorAuthType, ErrorResponse},
    router_data_v2::RouterDataV2,
    router_response_types::Response,
    types::Connectors,
};
use serde::Serialize;
use std::fmt::Debug;
use hyperswitch_masking::{ExposeInterface, Mask, Maskable, PeekInterface};
use interfaces::{
    api::ConnectorCommon, connector_integration_v2::ConnectorIntegrationV2, connector_types,
    events::connector_api_logs::ConnectorEvent,
};
use transformers::{
    self as ${connector_name},
};

use super::macros;
use crate::{types::ResponseRouterData, with_error_response_body};

pub const BASE64_ENGINE: base64::engine::GeneralPurpose = base64::engine::general_purpose::STANDARD;

use error_stack::ResultExt;

pub(crate) mod headers {
    pub(crate) const CONTENT_TYPE: &str = "Content-Type";
    pub(crate) const AUTHORIZATION: &str = "Authorization";
}

// Trait implementations with generic type parameters
impl<T: PaymentMethodDataTypes + Debug + Sync + Send + 'static + Serialize>
    connector_types::ConnectorServiceTrait<T> for ${connector_camel}<T>
{
}
impl<T: PaymentMethodDataTypes + Debug + Sync + Send + 'static + Serialize>
    connector_types::PaymentAuthorizeV2<T> for ${connector_camel}<T>
{
}
impl<T: PaymentMethodDataTypes + Debug + Sync + Send + 'static + Serialize>
    connector_types::PaymentSyncV2 for ${connector_camel}<T>
{
}
impl<T: PaymentMethodDataTypes + Debug + Sync + Send + 'static + Serialize>
    connector_types::PaymentVoidV2 for ${connector_camel}<T>
{
}
impl<T: PaymentMethodDataTypes + Debug + Sync + Send + 'static + Serialize>
    connector_types::RefundSyncV2 for ${connector_camel}<T>
{
}
impl<T: PaymentMethodDataTypes + Debug + Sync + Send + 'static + Serialize>
    connector_types::RefundV2 for ${connector_camel}<T>
{
}
impl<T: PaymentMethodDataTypes + Debug + Sync + Send + 'static + Serialize>
    connector_types::PaymentCapture for ${connector_camel}<T>
{
}
impl<T: PaymentMethodDataTypes + Debug + Sync + Send + 'static + Serialize>
    connector_types::ValidationTrait for ${connector_camel}<T>
{
}
impl<T: PaymentMethodDataTypes + Debug + Sync + Send + 'static + Serialize>
    connector_types::PaymentOrderCreate for ${connector_camel}<T>
{
}
impl<T: PaymentMethodDataTypes + Debug + Sync + Send + 'static + Serialize>
    connector_types::SetupMandateV2<T> for ${connector_camel}<T>
{
}
impl<T: PaymentMethodDataTypes + Debug + Sync + Send + 'static + Serialize>
    connector_types::RepeatPaymentV2 for ${connector_camel}<T>
{
}
impl<T: PaymentMethodDataTypes + Debug + Sync + Send + 'static + Serialize>
    connector_types::AcceptDispute for ${connector_camel}<T>
{
}
impl<T: PaymentMethodDataTypes + Debug + Sync + Send + 'static + Serialize>
    connector_types::SubmitEvidenceV2 for ${connector_camel}<T>
{
}
impl<T: PaymentMethodDataTypes + Debug + Sync + Send + 'static + Serialize>
    connector_types::DisputeDefend for ${connector_camel}<T>
{
}
impl<T: PaymentMethodDataTypes + Debug + Sync + Send + 'static + Serialize>
    connector_types::IncomingWebhook for ${connector_camel}<T>
{
}
impl<T: PaymentMethodDataTypes + Debug + Sync + Send + 'static + Serialize>
    connector_types::PaymentSessionToken for ${connector_camel}<T>
{
}

macros::create_all_prerequisites!(
    connector_name: ${connector_camel},
    generic_type: T,
    api: [
        (
            flow: Authorize,
            request_body: ${connector_camel}PaymentsRequest<T>,
            response_body: ${connector_camel}PaymentsResponse,
            router_data: RouterDataV2<Authorize, PaymentFlowData, PaymentsAuthorizeData<T>, PaymentsResponseData>,
        ),
        (
            flow: PSync,
            request_body: ${connector_camel}SyncRequest,
            response_body: ${connector_camel}SyncResponse,
            router_data: RouterDataV2<PSync, PaymentFlowData, PaymentsSyncData, PaymentsResponseData>,
        ),
        (
            flow: Refund,
            request_body: ${connector_camel}RefundRequest,
            response_body: ${connector_camel}RefundResponse,
            router_data: RouterDataV2<Refund, RefundFlowData, RefundsData, RefundsResponseData>,
        ),
        (
            flow: RSync,
            request_body: ${connector_camel}RefundSyncRequest,
            response_body: ${connector_camel}RefundSyncResponse,
            router_data: RouterDataV2<RSync, RefundFlowData, RefundSyncData, RefundsResponseData>,
        ),
        (
            flow: Capture,
            request_body: ${connector_camel}CaptureRequest,
            response_body: ${connector_camel}CaptureResponse,
            router_data: RouterDataV2<Capture, PaymentFlowData, PaymentsCaptureData, PaymentsResponseData>,
        ),
        (
            flow: Void,
            request_body: ${connector_camel}VoidRequest,
            response_body: ${connector_camel}VoidResponse,
            router_data: RouterDataV2<Void, PaymentFlowData, PaymentVoidData, PaymentsResponseData>,
        )
    ],
    amount_converters: [],
    member_functions: {
        pub fn build_headers<F, FCD, Req, Res>(
            &self,
            req: &RouterDataV2<F, FCD, Req, Res>,
        ) -> CustomResult<Vec<(String, Maskable<String>)>, errors::ConnectorError>
        where
            Self: ConnectorIntegrationV2<F, FCD, Req, Res>,
        {
            let mut header = vec![(
                headers::CONTENT_TYPE.to_string(),
                "application/json".to_string().into(),
            )];
            
            let mut api_key = self.get_auth_header(&req.get_connector_auth())?;
            header.append(&mut api_key);
            Ok(header)
        }

        pub fn connector_base_url_payments<'a, F, Req, Res>(
            &self,
            req: &'a RouterDataV2<F, PaymentFlowData, Req, Res>,
        ) -> &'a str {
            &req.resource_common_data.connectors.${connector_name}.base_url
        }

        pub fn connector_base_url_refunds<'a, F, Req, Res>(
            &self,
            req: &'a RouterDataV2<F, RefundFlowData, Req, Res>,
        ) -> &'a str {
            &req.resource_common_data.connectors.${connector_name}.base_url
        }
    }
);

impl<T: PaymentMethodDataTypes + Debug + Sync + Send + 'static + Serialize> ConnectorCommon
    for ${connector_camel}<T>
{
    fn id(&self) -> &'static str {
        "${connector_name}"
    }

    fn get_currency_unit(&self) -> CurrencyUnit {
        CurrencyUnit::Minor
    }

    fn common_get_content_type(&self) -> &'static str {
        "application/json"
    }

    fn base_url<'a>(&self, connectors: &'a Connectors) -> &'a str {
        &connectors.${connector_name}.base_url
    }

    fn get_auth_header(
        &self,
        auth_type: &ConnectorAuthType,
    ) -> CustomResult<Vec<(String, Maskable<String>)>, errors::ConnectorError> {
        let auth = ${connector_name}::${connector_camel}AuthType::try_from(auth_type)?;
        Ok(vec![(
            headers::AUTHORIZATION.to_string(),
            format!("Bearer {}", auth.api_key.peek()).into_masked(),
        )])
    }

    fn build_error_response(
        &self,
        res: Response,
        event_builder: Option<&mut ConnectorEvent>,
    ) -> CustomResult<ErrorResponse, errors::ConnectorError> {
        let response: ${connector_name}::${connector_camel}ErrorResponse = res
            .response
            .parse_struct("${connector_camel}ErrorResponse")
            .change_context(errors::ConnectorError::ResponseDeserializationFailed)?;

        with_error_response_body!(event_builder, response);

        Ok(ErrorResponse {
            status_code: res.status_code,
            code: response.code.unwrap_or_else(|| NO_ERROR_CODE.to_string()),
            message: response.message.unwrap_or_else(|| NO_ERROR_MESSAGE.to_string()),
            reason: response.reason,
            attempt_status: None,
            connector_transaction_id: None,
        })
    }
}

// Stub implementations for unsupported flows
impl<
        T: PaymentMethodDataTypes
            + std::fmt::Debug
            + std::marker::Sync
            + std::marker::Send
            + 'static
            + Serialize,
    > ConnectorIntegrationV2<PSync, PaymentFlowData, PaymentsSyncData, PaymentsResponseData>
    for ${connector_camel}<T>
{
}

impl<
        T: PaymentMethodDataTypes
            + std::fmt::Debug
            + std::marker::Sync
            + std::marker::Send
            + 'static
            + Serialize,
    > ConnectorIntegrationV2<Capture, PaymentFlowData, PaymentsCaptureData, PaymentsResponseData>
    for ${connector_camel}<T>
{
}

impl<
        T: PaymentMethodDataTypes
            + std::fmt::Debug
            + std::marker::Sync
            + std::marker::Send
            + 'static
            + Serialize,
    > ConnectorIntegrationV2<Void, PaymentFlowData, PaymentVoidData, PaymentsResponseData>
    for ${connector_camel}<T>
{
}

impl<
        T: PaymentMethodDataTypes
            + std::fmt::Debug
            + std::marker::Sync
            + std::marker::Send
            + 'static
            + Serialize,
    > ConnectorIntegrationV2<Refund, RefundFlowData, RefundsData, RefundsResponseData>
    for ${connector_camel}<T>
{
}

impl<
        T: PaymentMethodDataTypes
            + std::fmt::Debug
            + std::marker::Sync
            + std::marker::Send
            + 'static
            + Serialize,
    > ConnectorIntegrationV2<RSync, RefundFlowData, RefundSyncData, RefundsResponseData>
    for ${connector_camel}<T>
{
}

impl<
        T: PaymentMethodDataTypes
            + std::fmt::Debug
            + std::marker::Sync
            + std::marker::Send
            + 'static
            + Serialize,
    >
    ConnectorIntegrationV2<
        CreateOrder,
        PaymentFlowData,
        PaymentCreateOrderData,
        PaymentCreateOrderResponse,
    > for ${connector_camel}<T>
{
}

impl<
        T: PaymentMethodDataTypes
            + std::fmt::Debug
            + std::marker::Sync
            + std::marker::Send
            + 'static
            + Serialize,
    >
    ConnectorIntegrationV2<SubmitEvidence, DisputeFlowData, SubmitEvidenceData, DisputeResponseData>
    for ${connector_camel}<T>
{
}

impl<
        T: PaymentMethodDataTypes
            + std::fmt::Debug
            + std::marker::Sync
            + std::marker::Send
            + 'static
            + Serialize,
    > ConnectorIntegrationV2<DefendDispute, DisputeFlowData, DisputeDefendData, DisputeResponseData>
    for ${connector_camel}<T>
{
}

impl<
        T: PaymentMethodDataTypes
            + std::fmt::Debug
            + std::marker::Sync
            + std::marker::Send
            + 'static
            + Serialize,
    > ConnectorIntegrationV2<Accept, DisputeFlowData, AcceptDisputeData, DisputeResponseData>
    for ${connector_camel}<T>
{
}

impl<
        T: PaymentMethodDataTypes
            + std::fmt::Debug
            + std::marker::Sync
            + std::marker::Send
            + 'static
            + Serialize,
    >
    ConnectorIntegrationV2<
        SetupMandate,
        PaymentFlowData,
        SetupMandateRequestData<T>,
        PaymentsResponseData,
    > for ${connector_camel}<T>
{
}

impl<
        T: PaymentMethodDataTypes
            + std::fmt::Debug
            + std::marker::Sync
            + std::marker::Send
            + 'static
            + Serialize,
    >
    ConnectorIntegrationV2<RepeatPayment, PaymentFlowData, RepeatPaymentData, PaymentsResponseData>
    for ${connector_camel}<T>
{
}

impl<
        T: PaymentMethodDataTypes
            + std::fmt::Debug
            + std::marker::Sync
            + std::marker::Send
            + 'static
            + Serialize,
    >
    ConnectorIntegrationV2<
        CreateSessionToken,
        PaymentFlowData,
        SessionTokenRequestData,
        SessionTokenResponseData,
    > for ${connector_camel}<T>
{
}

// SourceVerification implementations for all flows
impl<T: PaymentMethodDataTypes + Debug + Sync + Send + 'static + Serialize>
    interfaces::verification::SourceVerification<
        Authorize,
        PaymentFlowData,
        PaymentsAuthorizeData<T>,
        PaymentsResponseData,
    > for ${connector_camel}<T>
{
}

impl<T: PaymentMethodDataTypes + Debug + Sync + Send + 'static + Serialize>
    interfaces::verification::SourceVerification<
        PSync,
        PaymentFlowData,
        PaymentsSyncData,
        PaymentsResponseData,
    > for ${connector_camel}<T>
{
}

impl<T: PaymentMethodDataTypes + Debug + Sync + Send + 'static + Serialize>
    interfaces::verification::SourceVerification<
        Capture,
        PaymentFlowData,
        PaymentsCaptureData,
        PaymentsResponseData,
    > for ${connector_camel}<T>
{
}

impl<T: PaymentMethodDataTypes + Debug + Sync + Send + 'static + Serialize>
    interfaces::verification::SourceVerification<
        Void,
        PaymentFlowData,
        PaymentVoidData,
        PaymentsResponseData,
    > for ${connector_camel}<T>
{
}

impl<T: PaymentMethodDataTypes + Debug + Sync + Send + 'static + Serialize>
    interfaces::verification::SourceVerification<
        Refund,
        RefundFlowData,
        RefundsData,
        RefundsResponseData,
    > for ${connector_camel}<T>
{
}

impl<T: PaymentMethodDataTypes + Debug + Sync + Send + 'static + Serialize>
    interfaces::verification::SourceVerification<
        RSync,
        RefundFlowData,
        RefundSyncData,
        RefundsResponseData,
    > for ${connector_camel}<T>
{
}

impl<T: PaymentMethodDataTypes + Debug + Sync + Send + 'static + Serialize>
    interfaces::verification::SourceVerification<
        SetupMandate,
        PaymentFlowData,
        SetupMandateRequestData<T>,
        PaymentsResponseData,
    > for ${connector_camel}<T>
{
}

impl<T: PaymentMethodDataTypes + Debug + Sync + Send + 'static + Serialize>
    interfaces::verification::SourceVerification<
        Accept,
        DisputeFlowData,
        AcceptDisputeData,
        DisputeResponseData,
    > for ${connector_camel}<T>
{
}

impl<T: PaymentMethodDataTypes + Debug + Sync + Send + 'static + Serialize>
    interfaces::verification::SourceVerification<
        SubmitEvidence,
        DisputeFlowData,
        SubmitEvidenceData,
        DisputeResponseData,
    > for ${connector_camel}<T>
{
}

impl<T: PaymentMethodDataTypes + Debug + Sync + Send + 'static + Serialize>
    interfaces::verification::SourceVerification<
        DefendDispute,
        DisputeFlowData,
        DisputeDefendData,
        DisputeResponseData,
    > for ${connector_camel}<T>
{
}

impl<T: PaymentMethodDataTypes + Debug + Sync + Send + 'static + Serialize>
    interfaces::verification::SourceVerification<
        CreateOrder,
        PaymentFlowData,
        PaymentCreateOrderData,
        PaymentCreateOrderResponse,
    > for ${connector_camel}<T>
{
}

impl<T: PaymentMethodDataTypes + Debug + Sync + Send + 'static + Serialize>
    interfaces::verification::SourceVerification<
        RepeatPayment,
        PaymentFlowData,
        RepeatPaymentData,
        PaymentsResponseData,
    > for ${connector_camel}<T>
{
}

impl<T: PaymentMethodDataTypes + Debug + Sync + Send + 'static + Serialize>
    interfaces::verification::SourceVerification<
        CreateSessionToken,
        PaymentFlowData,
        SessionTokenRequestData,
        SessionTokenResponseData,
    > for ${connector_camel}<T>
{
}
EOF

    print_success "Generated main connector file"
}

# Function to generate transformers file
generate_transformers_file() {
    local connector_name=$1
    local connector_camel=$2
    local connector_dir="${CONNECTOR_INTEGRATION_DIR}/connectors/${connector_name}"
    local transformers_file="${connector_dir}/transformers.rs"
    
    print_info "Generating transformers file: $transformers_file"
    
    # Create connector subdirectory
    mkdir -p "$connector_dir"
    
    cat > "$transformers_file" << EOF
use std::collections::HashMap;

use cards::CardNumber;
use common_utils::{
    ext_traits::OptionExt,
    pii,
    request::Method,
    types::{MinorUnit, StringMinorUnit},
};
use domain_types::{
    connector_flow::{self, Authorize, PSync, RSync, RepeatPayment, SetupMandate, Void, Capture},
    connector_types::{
        MandateReference, MandateReferenceId, PaymentFlowData, PaymentVoidData,
        PaymentsAuthorizeData, PaymentsCaptureData, PaymentsResponseData, PaymentsSyncData,
        RefundFlowData, RefundSyncData, RefundsData, RefundsResponseData, RepeatPaymentData,
        ResponseId, SetupMandateRequestData,
    },
    errors::{self, ConnectorError},
    payment_method_data::{
        PaymentMethodData, PaymentMethodDataTypes, RawCardNumber,
        WalletData as WalletDataPaymentMethod,
    },
    router_data::{ConnectorAuthType, ErrorResponse},
    router_data_v2::RouterDataV2,
    router_response_types::RedirectForm,
    utils,
};
use error_stack::ResultExt;
use hyperswitch_masking::{ExposeInterface, Secret, PeekInterface};
use serde::{Deserialize, Serialize};
use strum::Display;

use crate::types::ResponseRouterData;

pub struct ${connector_camel}RouterData<T, U> {
    pub router_data: T,
    pub phantom_data: std::marker::PhantomData<U>,
}

impl<T, U> ${connector_camel}RouterData<T, U> {
    pub fn new(router_data: T) -> Self {
        Self {
            router_data,
            phantom_data: std::marker::PhantomData,
        }
    }
}

// Auth Types
#[derive(Debug, Clone, Deserialize)]
pub struct ${connector_camel}AuthType {
    pub api_key: Secret<String>,
}

impl TryFrom<&ConnectorAuthType> for ${connector_camel}AuthType {
    type Error = error_stack::Report<ConnectorError>;
    fn try_from(auth_type: &ConnectorAuthType) -> Result<Self, Self::Error> {
        match auth_type {
            ConnectorAuthType::HeaderKey { api_key } => Ok(Self {
                api_key: api_key.to_owned(),
            }),
            _ => Err(errors::ConnectorError::FailedToObtainAuthType.into()),
        }
    }
}

// Request Types
#[derive(Debug, Serialize)]
pub struct ${connector_camel}PaymentsRequest<
    T: PaymentMethodDataTypes
        + std::fmt::Debug
        + std::marker::Sync
        + std::marker::Send
        + 'static
        + Serialize,
> {
    pub amount: MinorUnit,
    pub currency: String,
    pub payment_method: ${connector_camel}PaymentMethod<T>,
    pub return_url: Option<String>,
    pub description: Option<String>,
}

#[derive(Debug, Serialize)]
pub struct ${connector_camel}PaymentMethod<
    T: PaymentMethodDataTypes
        + std::fmt::Debug
        + std::marker::Sync
        + std::marker::Send
        + 'static
        + Serialize,
> {
    #[serde(rename = "type")]
    pub method_type: String,
    pub card: Option<${connector_camel}Card<T>>,
}

#[derive(Debug, Serialize)]
pub struct ${connector_camel}Card<
    T: PaymentMethodDataTypes
        + std::fmt::Debug
        + std::marker::Sync
        + std::marker::Send
        + 'static
        + Serialize,
> {
    pub number: RawCardNumber<T>,
    pub exp_month: Secret<String>,
    pub exp_year: Secret<String>,
    pub cvc: Option<Secret<String>>,
    pub holder_name: Option<Secret<String>>,
}

#[derive(Debug, Serialize)]
pub struct ${connector_camel}SyncRequest {
    pub transaction_id: String,
}

#[derive(Debug, Serialize)]
pub struct ${connector_camel}RefundRequest {
    pub amount: MinorUnit,
    pub currency: String,
    pub transaction_id: String,
    pub reason: Option<String>,
}

#[derive(Debug, Serialize)]
pub struct ${connector_camel}RefundSyncRequest {
    pub refund_id: String,
}

#[derive(Debug, Serialize)]
pub struct ${connector_camel}CaptureRequest {
    pub amount: MinorUnit,
    pub currency: String,
    pub transaction_id: String,
}

#[derive(Debug, Serialize)]
pub struct ${connector_camel}VoidRequest {
    pub transaction_id: String,
    pub reason: Option<String>,
}

// Response Types
#[derive(Debug, Clone, Default, Deserialize)]
pub struct ${connector_camel}PaymentsResponse {
    pub id: String,
    pub status: String,
    pub amount: Option<MinorUnit>,
    pub currency: Option<String>,
    pub redirect_url: Option<String>,
}

#[derive(Debug, Clone, Default, Deserialize)]
pub struct ${connector_camel}SyncResponse {
    pub id: String,
    pub status: String,
    pub amount: Option<MinorUnit>,
    pub currency: Option<String>,
}

#[derive(Debug, Clone, Default, Deserialize)]
pub struct ${connector_camel}RefundResponse {
    pub id: String,
    pub status: String,
    pub amount: Option<MinorUnit>,
    pub currency: Option<String>,
}

#[derive(Debug, Clone, Default, Deserialize)]
pub struct ${connector_camel}RefundSyncResponse {
    pub id: String,
    pub status: String,
    pub amount: Option<MinorUnit>,
    pub currency: Option<String>,
}

#[derive(Debug, Clone, Default, Deserialize)]
pub struct ${connector_camel}CaptureResponse {
    pub id: String,
    pub status: String,
    pub amount: Option<MinorUnit>,
    pub currency: Option<String>,
}

#[derive(Debug, Clone, Default, Deserialize)]
pub struct ${connector_camel}VoidResponse {
    pub id: String,
    pub status: String,
}

#[derive(Debug, Deserialize)]
pub struct ${connector_camel}ErrorResponse {
    pub code: Option<String>,
    pub message: Option<String>,
    pub reason: Option<String>,
}

// Request Conversion Implementations
impl<
        T: PaymentMethodDataTypes
            + std::fmt::Debug
            + std::marker::Sync
            + std::marker::Send
            + 'static
            + Serialize,
    >
    TryFrom<
        ${connector_camel}RouterData<
            RouterDataV2<
                Authorize,
                PaymentFlowData,
                PaymentsAuthorizeData<T>,
                PaymentsResponseData,
            >,
            T,
        >,
    > for ${connector_camel}PaymentsRequest<T>
{
    type Error = error_stack::Report<ConnectorError>;
    fn try_from(
        item: ${connector_camel}RouterData<
            RouterDataV2<
                Authorize,
                PaymentFlowData,
                PaymentsAuthorizeData<T>,
                PaymentsResponseData,
            >,
            T,
        >,
    ) -> Result<Self, Self::Error> {
        let payment_method = match &item.router_data.request.payment_method_data {
            PaymentMethodData::Card(card) => ${connector_camel}PaymentMethod {
                method_type: "card".to_string(),
                card: Some(${connector_camel}Card {
                    number: card.card_number.clone(),
                    exp_month: card.card_exp_month.clone(),
                    exp_year: card.card_exp_year.clone(),
                    cvc: card.card_cvc.clone(),
                    holder_name: card.card_holder_name.clone(),
                }),
            },
            _ => return Err(ConnectorError::NotSupported { message: "Payment method not supported".to_string(), connector: "${connector_name}" }.into()),
        };

        Ok(Self {
            amount: item.router_data.request.minor_amount,
            currency: item.router_data.request.currency.to_string(),
            payment_method,
            return_url: item.router_data.resource_common_data.get_return_url(),
            description: item.router_data.resource_common_data.get_optional_description(),
        })
    }
}

// Response Conversion Implementations
impl<
        T: PaymentMethodDataTypes
            + std::fmt::Debug
            + std::marker::Sync
            + std::marker::Send
            + 'static
            + Serialize,
    >
    TryFrom<
        ResponseRouterData<
            ${connector_camel}PaymentsResponse,
            RouterDataV2<
                Authorize,
                PaymentFlowData,
                PaymentsAuthorizeData<T>,
                PaymentsResponseData,
            >,
        >,
    > for RouterDataV2<Authorize, PaymentFlowData, PaymentsAuthorizeData<T>, PaymentsResponseData>
{
    type Error = error_stack::Report<ConnectorError>;
    fn try_from(
        item: ResponseRouterData<
            ${connector_camel}PaymentsResponse,
            RouterDataV2<
                Authorize,
                PaymentFlowData,
                PaymentsAuthorizeData<T>,
                PaymentsResponseData,
            >,
        >,
    ) -> Result<Self, Self::Error> {
        let status = match item.response.status.as_str() {
            "succeeded" => common_enums::AttemptStatus::Charged,
            "pending" => common_enums::AttemptStatus::Pending,
            "failed" => common_enums::AttemptStatus::Failure,
            _ => common_enums::AttemptStatus::Pending,
        };

        Ok(Self {
            resource_common_data: PaymentFlowData {
                status,
                ..item.router_data.resource_common_data
            },
            response: Ok(PaymentsResponseData::TransactionResponse {
                resource_id: ResponseId::ConnectorTransactionId(item.response.id),
                redirection_data: item.response.redirect_url.map(|url| {
                    Box::new(RedirectForm::Form {
                        endpoint: url,
                        method: Method::Get,
                        form_fields: HashMap::new(),
                    })
                }),
                mandate_reference: None,
                connector_metadata: None,
                network_txn_id: None,
                connector_response_reference_id: None,
                incremental_authorization_allowed: None,
                raw_connector_response: None,
                status_code: item.http_code,
            }),
            ..item.router_data
        })
    }
}

// Implement similar patterns for other flows...
// This is a basic template - you would need to implement the remaining conversions
// for PSync, Refund, RSync, Capture, and Void flows following the same pattern.

EOF

    print_success "Generated transformers file"
}

# Trap to restore backups on error
trap 'restore_backups' ERR

# Main execution starts here
main() {
    local connector_name=$(echo "$1" | tr '[:upper:]' '[:lower:]')
    local base_url=$2
    local connector_camel=$(to_camel_case "$connector_name")
    
    print_info "Starting connector generation for: $connector_name"
    print_info "Base URL: $base_url"
    print_info "CamelCase name: $connector_camel"
    
    # Validate inputs
    validate_inputs "$connector_name" "$base_url"
    
    # Change to script directory
    cd "$SCRIPT_DIR"
    
    # Find alphabetical placement
    local prev_connector=""
    find_prev_connector "$connector_name" prev_connector
    local prev_connector_camel=$(to_camel_case "$prev_connector")
    
    print_info "Will place after connector: $prev_connector ($prev_connector_camel)"
    
    # Create backups before modifications
    create_backup "${DOMAIN_TYPES_DIR}/connector_types.rs"
    create_backup "${DOMAIN_TYPES_DIR}/types.rs"
    create_backup "${CONNECTOR_INTEGRATION_DIR}/types.rs"
    create_backup "${CONNECTOR_INTEGRATION_DIR}/connectors.rs"
    create_backup "${CONFIG_DIR}/development.toml"
    
    print_success "Validation passed. Proceeding with connector generation..."
    
    # Generate boilerplate files
    print_info "Generating connector boilerplate files..."
    generate_connector_file "$connector_name" "$connector_camel"
    generate_transformers_file "$connector_name" "$connector_camel"
    
    # Update configuration files
    print_info "Updating configuration files..."
    update_connector_enum "$connector_name" "$connector_camel" "$prev_connector_camel"
    update_connectors_struct "$connector_name" "$prev_connector"
    update_connector_integration "$connector_name" "$connector_camel" "$prev_connector_camel"
    update_config "$connector_name" "$base_url" "$prev_connector"
    
    # Validate compilation
    print_info "Validating generated code..."
    if validate_compilation; then
        print_success "Connector '$connector_name' created successfully!"
        print_success "Generated files:"
        print_info "  - ${CONNECTOR_INTEGRATION_DIR}/connectors/${connector_name}.rs"
        print_info "  - ${CONNECTOR_INTEGRATION_DIR}/connectors/${connector_name}/transformers.rs"
        print_info ""
        print_info "Next steps:"
        print_info "1. Implement connector-specific logic in the generated files"
        print_info "2. Update API endpoints and request/response structures"
        print_info "3. Add proper error handling and status mappings"
        print_info "4. Test the implementation with actual API calls"
        print_info ""
        print_warning "Remember to add your API credentials for testing!"
    else
        print_error "Generated code has compilation errors. Check the output above."
        exit 1
    fi
}

# Function to validate compilation
validate_compilation() {
    print_info "Running cargo check to validate compilation..."
    cd "$SCRIPT_DIR"
    
    if cargo check --quiet > /dev/null 2>&1; then
        return 0
    else
        print_error "Compilation failed. Running cargo check for detailed errors..."
        cargo check
        return 1
    fi
}

# Function to show help
show_help() {
    echo "Connector Service - Add New Connector Script"
    echo ""
    echo "USAGE:"
    echo "    $0 <connector_name> <base_url>"
    echo ""
    echo "ARGUMENTS:"
    echo "    connector_name    Name of the connector in snake_case (e.g., stripe, paypal_pro)"
    echo "    base_url         Base URL for the connector API (e.g., https://api.stripe.com)"
    echo ""
    echo "EXAMPLES:"
    echo "    $0 stripe https://api.stripe.com"
    echo "    $0 paypal_pro https://api.paypal.com"
    echo "    $0 square_sandbox https://connect.squareupsandbox.com"
    echo ""
    echo "DESCRIPTION:"
    echo "    This script generates fresh boilerplate code for new payment connectors"
    echo "    in the connector-service architecture. It creates:"
    echo "    - Main connector implementation file with RouterDataV2 support"
    echo "    - Transformer file with request/response structures"
    echo "    - Updates configuration files and enum definitions"
    echo "    - Ensures proper alphabetical ordering of connectors"
    echo ""
    echo "NOTES:"
    echo "    - The script validates all inputs before making changes"
    echo "    - Backups are created for all modified files"
    echo "    - Generated code follows connector-service architecture patterns"
    echo "    - Compilation is validated before completion"
}

# Check for help flag
if [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]] || [[ "$#" -eq 0 ]]; then
    show_help
    exit 0
fi

# Execute main function if script is run directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi